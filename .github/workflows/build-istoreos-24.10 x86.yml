name: Build iStore OS 24.10 x86

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      lan_ip:
        description: '设置LAN IP地址'
        required: true
        default: '192.168.100.1'
      os_name:
        description: '设置系统名称'
        required: true
        default: 'iStoreOS'
      enable_wifi:
        description: '启用WiFi'
        required: false
        default: false
        type: boolean
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
   - cron: 0 16 * * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  FEEDS_CONF: feeds.conf
  CONFIG_FILE: .config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  WORK_DIR: /mnt/workdir
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        REPO_BRANCH:
          - istoreos-24.10
        ARCHITECTURE:
          - x86-alpha
        os:
          - ubuntu-22.04
      fail-fast: false

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 强力清理磁盘空间
      run: |
        echo "初始磁盘空间"
        df -hT
        sudo rm -rf /tmp/* /var/tmp/*
        sudo rm -rf $HOME/.cache
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache /opt/az /opt/mssql-tools /opt/pipx /usr/local/share/boost
        sudo docker system prune -af || true
        sudo apt-get clean
        sudo apt-get autoremove -y
        echo "清理后磁盘空间"
        df -hT

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
        RUSTUP_HOME: /mnt/workdir/rustup
        CARGO_HOME: /mnt/workdir/cargo
      run: |
        echo "------------------------------- 更新并安装依赖 -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/${{ matrix.os }})
        wget -q https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- 清理Docker镜像和软件 -------------------------------"
        sudo docker rmi $(sudo docker images -q) 2>/dev/null || true
        sudo docker image prune -a -f || true
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        echo "环境初始化后磁盘空间"
        df -hT

    - name: 安装 Go 1.21.1
      uses: actions/setup-go@v5
      with:
        go-version: 1.21.1

    - name: 克隆源码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b ${{ matrix.REPO_BRANCH }} openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存构建动作
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ matrix.os }}-${{ matrix.ARCHITECTURE }}-${{ matrix.REPO_BRANCH }}-gcc-optimized
        prefix: ${{ github.workspace }}/openwrt

    - name: 预修复 feeds 依赖报错
      run: |
        # 移除已知的不存在依赖，防止编译中断
        sed -i '/LingTiGameAcc/d' openwrt/package/feeds/third_party/luci-app-LingTiGameAcc/Makefile || true
        sed -i '/netdata-ssl/d' openwrt/package/community/luci-app-netdata/Makefile || true

    - name: 加载自定义 feeds
      env:
        FEEDS_CONF_PATH: ${{ matrix.ARCHITECTURE }}/${{ env.FEEDS_CONF }}
      run: |
        [ -e $FEEDS_CONF_PATH ] && mv $FEEDS_CONF_PATH openwrt/$FEEDS_CONF
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a

    - name: 安装 feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a

    - name: 修复 Python3 编译问题
      run: |
        cd /mnt/workdir/openwrt
        echo "修复 Python3 编译问题..."
        if [ -f feeds/packages/lang/python/python3/Makefile ]; then
          echo "找到 Python3 Makefile，应用修复..."
          sed -i 's/--enable-optimizations/--disable-optimizations/g' feeds/packages/lang/python/python3/Makefile
          sed -i '/--enable-profile-optimizations/d' feeds/packages/lang/python/python3/Makefile
          sed -i '/CFLAGS_NODIST.*-fprofile/d' feeds/packages/lang/python/python3/Makefile
          echo "Python3 修复完成"
        else
          echo "未找到 Python3 Makefile，跳过修复"
        fi

    - name: 加载自定义配置
      env:
        CONFIG_FILE_PATH: ${{ matrix.ARCHITECTURE }}/${{ env.CONFIG_FILE }}
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE_PATH ] && mv $CONFIG_FILE_PATH openwrt/$CONFIG_FILE
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH ${{ matrix.ARCHITECTURE }}

    - name: 设置LAN IP地址（路由器登录地址）
      run: |
        cd openwrt
        SET_IP=${{ github.event.inputs.lan_ip }}
        sed -i "s/192\\.168\\.[0-9]*\\.[0-9]*/$SET_IP/g" package/base-files/files/bin/config_generate
        echo "Set LAN IP Address: $SET_IP"

    - name: 设置系统名称
      run: |
        cd openwrt
        set_os_name=${{ github.event.inputs.os_name }}
        sed -i "s/OpenWrt/${set_os_name}/g" package/base-files/files/bin/config_generate
        echo "Set OS name : ${set_os_name}"

    - name: 启用WiFi
      if: github.event.inputs.enable_wifi == 'true'
      run: |
        cd openwrt
        sed -i 's/disabled=1/disabled=0/g' package/kernel/mac80211/files/lib/wifi/mac80211.sh

    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 生成配置文件
      run: |
        cd openwrt
        make defconfig
        echo "配置文件生成完成"

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        echo "开始下载软件包..."
        for i in {1..3}; do
          if make download -j8; then
            echo "软件包下载成功"
            break
          else
            echo "第 $i 次下载失败，等待 30 秒后重试..."
            sleep 30
          fi
        done
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        echo "软件包下载完成"
        df -hT

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo "开始编译固件..."
        start_time=$(date)
        echo "编译开始时间: $start_time"
        MAKE_JOBS=$(nproc)
        echo "尝试多线程编译 (j$MAKE_JOBS)..."
        if make -j$MAKE_JOBS; then
          echo "多线程编译成功！"
        else
          echo "多线程编译失败，尝试单线程编译..."
          if make -j1; then
            echo "单线程编译成功！"
          else
            echo "单线程编译也失败，开启详细输出进行最后尝试..."
            echo "这可能需要很长时间，请耐心等待..."
            if make -j1 V=s; then
              echo "详细模式编译成功！"
            else
              echo "编译完全失败，请检查错误日志"
              # 自动清理大目录，为重试释放空间
              cd ..
              rm -rf openwrt/build_dir openwrt/staging_dir || true
              exit 1
            fi
          fi
        fi
        end_time=$(date)
        echo "编译完成时间: $end_time"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        df -hT

    - name: 检查编译产物
      run: |
        cd openwrt
        echo "检查编译产物..."
        if [ -d "bin/targets" ]; then
          echo "编译产物目录存在"
          find bin/targets -name "*.img*" -o -name "*.bin" -o -name "*.gz" | head -10
        else
          echo "警告: 编译产物目录不存在"
          ls -la bin/ || echo "bin 目录不存在"
        fi
        df -hT

    - name: 检查磁盘空间
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@v4
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 上传固件目录
      uses: actions/upload-artifact@v4
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ matrix.ARCHITECTURE }}-24.10" >> $GITHUB_OUTPUT
        touch release.txt
        echo "
        💻 架构: ${{ matrix.ARCHITECTURE }}

        📂 源码: ${{ env.REPO_URL }}

        🌳 分支: ${{ matrix.REPO_BRANCH }}

        ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")

        🌐 管理地址: ${{ github.event.inputs.lan_ip }}

        👤 用户名: root

        🔒 密码: password

        📝 说明: 本固件基于 iStoreOS 24.10 构建，已优化编译流程并修复已知问题
        " >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除运行记录
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@v0.3.4
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 6
        delete_tags: true
